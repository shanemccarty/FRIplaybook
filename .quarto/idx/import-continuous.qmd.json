{"title":"Live Qualtrics Reporting","markdown":{"yaml":{"title":"Live Qualtrics Reporting","author":"Gavin Rualo","abstract":"This chapter demonstrates how to programmatically download survey data from Qualtrics\nusing the Qualtrics API. Students learn to authenticate with Qualtrics, initiate data\nexports, and download responses directly into R for real-time analysis and reporting.\nThis approach enables automated data updates and live dashboards that reflect the most\ncurrent survey responses without manual downloads. Using this approach, a research team should be able to run analyses during the last week before the poster is submitted to maximize the data collection window.\n","format":"html","engine":"knitr","editor":"visual","execute":{"eval":false,"echo":true}},"headingText":"ðŸ“– Additional Learning Resources","containsRefs":false,"markdown":"\n\n::: {.callout-tip icon=\"false\"}\n\n- **Qualtrics API Documentation**: [API Reference](https://api.qualtrics.com/docs/)\n- **qualtRics R Package**: [Working with APIs in R](https://cran.r-project.org/web/packages/qualtRics/vignettes/qualtRics.html)\n\n:::\n\n## Benefits of QualtRics Continuous Importing of Survey Data\nBy importing data continously using the `qualtRics` R package, you do not need to export from qualtrics and upload/import a data file. You can generate with up-to-date data instaneously for a:  \n- Quarto report \n- Plots in a shiny app \n- Quarto presentation, such as a live demonstration with survey data collected moments ago or to show what your code can do \n\n## Getting necessary Qualtrics information\n\n![Qualtrics Info](images/qualtrics_info_ex.png)\n\nWhen you log into Qualtrics, you're going to need to retrieve a few pieces of data specific to your account and the survey that you want to get live data from. Here, we've clicked our user icon in the top right and gone to \"Account Settings.\" You're going to need these strings later.\n\nNext, you're going to need your survey ID. When you click on the survey that you're getting live data from, the URL will look something like this: https://binghamton.yul1.qualtrics.com/survey-builder/SV_6mOC1SaJbecAuP0/edit The survey ID is the string between survey-builder/ and /edit, in this case, being \"SV_6mOC1SaJbecAuP0\"\n\nGetting into the actual code, we have the following steps: \\## Import necessary packages:\n\n```{r}\n#| autorun: false\n#| completion: true\n#| echo: true\n#| output: false\n#| warning: false\n#| error: false\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(readr)\n```\n\n## Save important info to variables:\n\n```{r}\napi_token <- \"1V0X29BHlwPfSYPsUMQ5d8tQfeydhsVBcGQ2v9Bw\"\ndata_center <- \"yul1\"\nsurvey_id <- \"SV_6mOC1SaJbecAuP0\"\n\nbase_url <- paste0(\"https://\", data_center, \".qualtrics.com/API/v3\")\nheaders <- add_headers(\n  \"X-API-TOKEN\" = api_token,\n  \"Content-Type\" = \"application/json\"\n)\n```\n\nIn this chunk, after saving our API key and survey ID info, we construct the URL that we are going to scrape using the paste0 function (which just combines the arguments into a single string with no spaces between them). We add these specific headers because they are necessary arguments for the API call.\n\n## Start the export job\n\n```{r}\nstart_response_export <- function(survey_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses\")\n  body <- list(format = \"csv\")  # Use CSV format here\n  res <- POST(url, headers, body = toJSON(body, auto_unbox = TRUE))\n  stop_for_status(res)\n  content(res, as = \"parsed\", simplifyVector = TRUE)\n}\n```\n\nThis chunk creates the API endpoint and allows us to begin exporting. It also gives us a progress report on how close the data is to being exported!\n\n## Poll for export completion\n\n```{r}\ncheck_export_progress <- function(progress_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses/\", progress_id)\n  repeat {\n    res <- GET(url, headers)\n    stop_for_status(res)\n    progress <- content(res, as = \"parsed\", simplifyVector = TRUE)\n    if (progress$result$status == \"complete\") {\n      return(progress$result$fileId)\n    } else if (progress$result$status == \"failed\") {\n      stop(\"Export failed\")\n    }\n    Sys.sleep(2)\n  }\n}\n```\n\nOnce the export is ready, this chunk returns the ID for the file that we can now download from the API.\n\n## Download and read CSV file\n\n```{r}\ndaily_download_responses_csv <- function(file_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses/\", file_id, \"/file\")\n  res <- GET(url, headers)\n  stop_for_status(res)\n  tmp <- tempfile(fileext = \".zip\")\n  writeBin(content(res, \"raw\"), tmp)\n  unzip_dir <- tempdir()\n  unzip(tmp, exdir = unzip_dir)\n  csv_file <- list.files(unzip_dir, pattern = \"*.csv\", full.names = TRUE)\n  read_csv(csv_file)\n}\n```\n\nThis chunk unpacks the output into a .csv file which makes it ready for analysis!\n\n## Main execution\n\n```{r}\nexport_response <- start_response_export(survey_id)\nprogress_id <- export_response$result$progressId\nfile_id <- check_export_progress(progress_id)\nresponses_df <- daily_download_responses_csv(file_id)\n```\n\nFinally, we set up our dataframes. These dataframes are now in your environment and can update charts or tables every time you reload the export!\n","srcMarkdownNoYaml":"\n\n::: {.callout-tip icon=\"false\"}\n## ðŸ“– Additional Learning Resources\n\n- **Qualtrics API Documentation**: [API Reference](https://api.qualtrics.com/docs/)\n- **qualtRics R Package**: [Working with APIs in R](https://cran.r-project.org/web/packages/qualtRics/vignettes/qualtRics.html)\n\n:::\n\n## Benefits of QualtRics Continuous Importing of Survey Data\nBy importing data continously using the `qualtRics` R package, you do not need to export from qualtrics and upload/import a data file. You can generate with up-to-date data instaneously for a:  \n- Quarto report \n- Plots in a shiny app \n- Quarto presentation, such as a live demonstration with survey data collected moments ago or to show what your code can do \n\n## Getting necessary Qualtrics information\n\n![Qualtrics Info](images/qualtrics_info_ex.png)\n\nWhen you log into Qualtrics, you're going to need to retrieve a few pieces of data specific to your account and the survey that you want to get live data from. Here, we've clicked our user icon in the top right and gone to \"Account Settings.\" You're going to need these strings later.\n\nNext, you're going to need your survey ID. When you click on the survey that you're getting live data from, the URL will look something like this: https://binghamton.yul1.qualtrics.com/survey-builder/SV_6mOC1SaJbecAuP0/edit The survey ID is the string between survey-builder/ and /edit, in this case, being \"SV_6mOC1SaJbecAuP0\"\n\nGetting into the actual code, we have the following steps: \\## Import necessary packages:\n\n```{r}\n#| autorun: false\n#| completion: true\n#| echo: true\n#| output: false\n#| warning: false\n#| error: false\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(readr)\n```\n\n## Save important info to variables:\n\n```{r}\napi_token <- \"1V0X29BHlwPfSYPsUMQ5d8tQfeydhsVBcGQ2v9Bw\"\ndata_center <- \"yul1\"\nsurvey_id <- \"SV_6mOC1SaJbecAuP0\"\n\nbase_url <- paste0(\"https://\", data_center, \".qualtrics.com/API/v3\")\nheaders <- add_headers(\n  \"X-API-TOKEN\" = api_token,\n  \"Content-Type\" = \"application/json\"\n)\n```\n\nIn this chunk, after saving our API key and survey ID info, we construct the URL that we are going to scrape using the paste0 function (which just combines the arguments into a single string with no spaces between them). We add these specific headers because they are necessary arguments for the API call.\n\n## Start the export job\n\n```{r}\nstart_response_export <- function(survey_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses\")\n  body <- list(format = \"csv\")  # Use CSV format here\n  res <- POST(url, headers, body = toJSON(body, auto_unbox = TRUE))\n  stop_for_status(res)\n  content(res, as = \"parsed\", simplifyVector = TRUE)\n}\n```\n\nThis chunk creates the API endpoint and allows us to begin exporting. It also gives us a progress report on how close the data is to being exported!\n\n## Poll for export completion\n\n```{r}\ncheck_export_progress <- function(progress_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses/\", progress_id)\n  repeat {\n    res <- GET(url, headers)\n    stop_for_status(res)\n    progress <- content(res, as = \"parsed\", simplifyVector = TRUE)\n    if (progress$result$status == \"complete\") {\n      return(progress$result$fileId)\n    } else if (progress$result$status == \"failed\") {\n      stop(\"Export failed\")\n    }\n    Sys.sleep(2)\n  }\n}\n```\n\nOnce the export is ready, this chunk returns the ID for the file that we can now download from the API.\n\n## Download and read CSV file\n\n```{r}\ndaily_download_responses_csv <- function(file_id) {\n  url <- paste0(base_url, \"/surveys/\", survey_id, \"/export-responses/\", file_id, \"/file\")\n  res <- GET(url, headers)\n  stop_for_status(res)\n  tmp <- tempfile(fileext = \".zip\")\n  writeBin(content(res, \"raw\"), tmp)\n  unzip_dir <- tempdir()\n  unzip(tmp, exdir = unzip_dir)\n  csv_file <- list.files(unzip_dir, pattern = \"*.csv\", full.names = TRUE)\n  read_csv(csv_file)\n}\n```\n\nThis chunk unpacks the output into a .csv file which makes it ready for analysis!\n\n## Main execution\n\n```{r}\nexport_response <- start_response_export(survey_id)\nprogress_id <- export_response$result$progressId\nfile_id <- check_export_progress(progress_id)\nresponses_df <- daily_download_responses_csv(file_id)\n```\n\nFinally, we set up our dataframes. These dataframes are now in your environment and can update charts or tables every time you reload the export!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["webr"],"highlight-style":{"light":"github","dark":"github-dark"},"toc":true,"toc-depth":3,"number-sections":true,"output-file":"import-continuous.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","webr":{"packages":["ggplot2","dplyr","tidyr","readr","haven","readxl","NHANES","psych"],"autoload-packages":false,"show-startup-message":true,"show-header-message":true,"channel-type":"automatic","home-dir":"/home/web_user","base-url":"https://webr.r-wasm.org/latest/"},"live":{"show-editor":true,"show-console":true,"editor-theme":"textmate","editor-font-size":14,"console-font-size":14},"params":{"organization":"FRI Public Health Research Stream","contact_email":"fripublichealth@binghamton.edu","version":"1.0","authors":{"lead":"Shane McCarty, PhD","contributors":[{"name":"Zihan Hei"},{"name":"Gavin Rualo"}]}},"theme":"cosmo","respect-user-color-scheme":true,"code-copy":true,"number-depth":3,"page-footer":{"left":"Â© 2025 FRI Public Health Research Stream","right":[{"icon":"github","href":"https://github.com/shanemccarty/FRIplaybook"},{"icon":"house","href":"https://fripublichealth.quarto.pub"}]},"search":true,"title":"Live Qualtrics Reporting","author":"Gavin Rualo","abstract":"This chapter demonstrates how to programmatically download survey data from Qualtrics\nusing the Qualtrics API. Students learn to authenticate with Qualtrics, initiate data\nexports, and download responses directly into R for real-time analysis and reporting.\nThis approach enables automated data updates and live dashboards that reflect the most\ncurrent survey responses without manual downloads. Using this approach, a research team should be able to run analyses during the last week before the poster is submitted to maximize the data collection window.\n","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}