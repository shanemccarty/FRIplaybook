---
title: "Visualize data in ggplot2"
subtitle: "How to produce publication-ready plots"
author:
  - Andrew Silhavy
  - Shane McCarty, PhD
abstract: |
  This chapter introduces students to the ggplot2 package, a powerful tool for creating sophisticated and publication-ready data visualizations in R. Students learn the foundational "grammar of graphics" approach, which builds plots layer by layer using seven core components: data, mapping, geometries, facets, statistics, coordinates, and  themes. Through hands-on examples using insurance data, the chapter demonstrates how to construct various plot types including scatterplots, bar plots, and violin plots. 
  Students explore how to visualize relationships between variables, incorporate grouping variables using color and faceting, and customize plots with titles, labels, and themes. By the end of this chapter, students will understand how to select appropriate visualizations based on data types and create professional-quality figures for their public health research.
keywords:
  - ggplot2
  - data visualization
  - grammar of graphics
  - R
  - exploratory data analysis
date: 10.21.2025
date-format: "MM.DD.YYYY"
format: html
editor: visual
execute:
  warning: false
  message: false
---

::: callout-tip
## 📖 `ggplot2` resources

-   [Intro to ggplot2](https://ggplot2.tidyverse.org/articles/ggplot2.html)
-   [Documentation](https://ggplot2.tidyverse.org)
-   [R4DS Book Chapter 1](https://r4ds.hadley.nz/data-visualize.html)
-   [R4DS Book Ch. 9 - 11](https://r4ds.hadley.nz/visualize.html)
-   [ggplot2 Book](https://ggplot2-book.org)
-   [Datacamp](https://www.datacamp.com/courses/introduction-to-data-visualization-with-ggplot2)
-   [Posit Cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html)
-   [PDF Cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf)
:::

::: {.callout-important appearance="simple"}
## Required

Your *R&D Report* and *R&D Team Manuscript* should include [ggsave( )](#save) information so you can export your plots quickly and add them to the poster.
:::

## Example Data: Insurance Charges

The example dataset is entitled "Medical Cost Personal Costs" from [Kaggle](#0).

### Load and Import

To install and load ggplot2:

```{r}
#| label: install packages
#| eval: false
install.packages("ggplot2")
```

Let's start by loading our dataset and exploring it:

```{r}
#| label: import-data-insurance
insurance <- read.csv("data/insurance.csv")
```

```{r}
#| label: load-library-ggplot2
library(ggplot2)
```

### Summarize `insurance` data

Let's learn more about our data with `summary()`:

```{r}
#| label: summarize-variables
summary(insurance)
```

```{r}
#| label: review-header
head(insurance, 10)
```

## The Seven Components of ggplot2

Think of building a ggplot like making a layered lasagna - you add one component at a time to create the final product.

![*In ggplot2, add layers as you would in making lasagna*](images/ggplot2-lasagna.png)

The seven components are:

1.  **Data**: The dataset you're visualizing

2.  **Mapping**: Which variables go on which axes (aesthetics)

3.  **Geometries**: The type of plot (points, lines, bars, etc.)

4.  **Facets**: Subplots based on categorical variables

5.  **Statistics**: Statistical transformations of the data

6.  **Coordinates**: The coordinate system (usually Cartesian)

7.  **Theme**: Visual styling and appearance

[![source: \[ggplot2.tidyverse.org\](https://ggplot2.tidyverse.org/articles/ggplot2.html)](images/ggplot2-layers.png){fig-alt="the image includes 7 colors for each of the 7 layers"}](https://ggplot2.tidyverse.org/articles/ggplot2.html)

### Understanding Data Types

Before creating visualizations, it's important to understand your data types:

**Qualitative Data:**

-   🏷️ **Nominal Data**: Categories without any order (e.g., Red, Green, Blue)

-   📶 **Ordinal Data**: Categories with some order (e.g., Small, Medium, Large)

**Quantitative Data:**

-   🔢 **Discrete**: Countable data (e.g., number of people in a room)

-   📏 **Continuous**: Measurable data (e.g., height, weight)

## Decision Tree

Your research question can be classified as **comparative** research or **relationship** research ([Barroga & Matanguihan, 2022](https://pubmed.ncbi.nlm.nih.gov/35470596/)).

![*The decision tree helps researchers to identify the specific statistical technique based on their comparative or relationship research question*](images/ggplot2-decision.png)

### Relationship Research

For relationship research, the variables are 📏 **Continuous** because they range along a continuum, such as a scale for beliefs from 1 (strongly disagree) to 6 (strongly agree). To examine the relationship between two continous variables, use the steps below to build a custom scatterplot.

#### STEP-BY-STEP TO BUILD A SCATTERPLOT 

#### Step 1: Set up data and mapping

What is the relationship between BMI and insurance charges?

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges))
```

This creates a blank canvas with our axes defined, but no data displayed yet!

#### Step 2: Add geometry (points)

Add points to create a scatterplot using `geom_point()`:

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges)) + geom_point()
```

#### Step 3: Add a statistical layer (trend line)

Add a linear model line with `geom_smooth()`:

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges)) + geom_point() +
  geom_smooth(method = "lm")
```

Notice how it looks like we have two different populations? Let's explore this further.

#### Optional – Step 4. Incorporate grouping (color)

There are two main approaches to visualizing grouping variables:

##### Method 1: Using Color

Map the `smoker` variable to color:

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges)) + geom_point() +
  geom_smooth(method = "lm")
```

##### Method 2: Using Facets

Create separate panels for each group with `facet_wrap()`:

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~smoker)
```

Both methods reveal that smoking status significantly affects the relationship between BMI and insurance charges!

#### Step 5. Customize Appearance

##### Adding Titles and Labels

Make your plot more informative with descriptive titles:

```{r}
ggplot(data = insurance,
       mapping = aes(
         x = bmi,
         y = charges)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Insurance charges vs 
          BMI for smokers and non-smokers") +
  xlab("Body Mass Index (BMI)") +
  ylab("Insurance Charges")
```

##### Changing the Theme

Apply a professional theme with `theme_bw()`:

```{r}
#| label: ggplot with black and white theme 
#| fig-cap: "a scatterplot depicting a linear relationship between BMI and insurance charges"
#| fig-height: 6
#| fig-width: 8

ggplot(data = insurance, mapping = aes(x = bmi, y = charges, color = smoker)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Insurance charges vs 
          BMI for smokers and non-smokers") +
  xlab("Body Mass Index (BMI)") +
  ylab("Insurance Charges") +
  theme_bw()
```

::: {.callout-important appearance="simple"}
## Select a theme

Team members should pick **one theme** (from the [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)) to use with all plots in the individual reports and the team manuscript!
:::

##### Adjusting Axis Scales

Sometimes, you need to manually control the range of your axes for better visualization or to match other plots or to capture the entire range of the possible response options (e.g., 1-6, 1-10, 1 - 100). 

Set specific limits with `xlim()` and `ylim()`. 

```{r}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges, color = smoker)) +
  geom_point() +
  geom_smooth(method = "lm") +
  xlim(15, 55) +  # Set x-axis from 15 to 55
  ylim(0, 65000) +  # Set y-axis from 0 to 65000
  ggtitle("Insurance charges vs BMI for smokers and non-smokers") +
  xlab("Body Mass Index (BMI)") +
  ylab("Insurance Charges") +
  theme_bw()
```

::: {.callout-warning}
## Warning: Data outside limits will be removed
Using `xlim()` and `ylim()` removes any data points outside the specified range. This can affect trend lines!
:::

::: {.callout-important appearance="simple"}
## Requirement: X and Y Axes

If your response options range from 1 to 6. Use `ylim( )` to adjust the y-axis to range from 1 to 6 too. 
:::

##### Using Colors

Want to improve your plots with colors?

-   [4 ways to use colors in ggplot2 more efficiently](https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html)

-   [Dealing with colors in ggplot2](https://r-graph-gallery.com/ggplot2-color.html)

-   [Customizing ggplot2 color and fill scales](https://sjspielman.github.io/introverse/articles/color_fill_scales.html)

-   [How to use better colors in ggplot (youtube)](https://www.youtube.com/watch?v=ZVSbY4z7tMY)

### Comparative Research

Comparative research questions examine mean score differences on a continuous (quantitative) variable based on real or artificial (researcher-decided) group membership. Simply put, comparative research offers a way of comparing different categories to one another. These categories can be:

-    🏷️ **Nominal Data** (Gender Identity)

    -   Man
    -   Woman
    -   Non-Binary

-   📶 **Ordinal Data** (Age Group)

    -   18 - 35
    -   36 - 54
    -   55 - 75
    -   76+

#### STEP-BY-STEP TO BUILD A BARPLOT WITH `geom_bar()`

Bar plots are useful for comparing mean scores across groups.

#### Step 1: Set up data and mapping

```{r}
#| label: plot-region-charges-data-mapping 
#| fig-cap: "a barplot depicting differences in charges by region"
#| fig-alt: a barplot of insurance charges by region  
#| fig-height: 6
#| fig-width: 8

plot_region_charges <- ggplot(
  data = insurance,
  mapping = aes(
    x = region,
    y = charges)
  )

## there is nothing to see yet! 
```

#### Step 2: Add geometry (bars)

```{r}
#| label: plot-region-charges-bar 
#| fig-cap: "a barplot depicting differences in charges by region"
#| fig-alt: a barplot of insurance charges by region  
#| fig-height: 6
#| fig-width: 8

plot_region_charges <- ggplot(
  data = insurance,
  mapping = aes(
    x = region,
    y = charges)) +
  geom_bar(stat = 'summary', fun = 'mean')
```

#### Step 3: Customize bars

```{r}
#| label: plot-region-charges-bar-custom
#| fig-cap: "a barplot depicting differences in charges by region"
#| fig-alt: a barplot of insurance charges by region  
#| fig-height: 6
#| fig-width: 8

plot_region_charges <- ggplot(
  data = insurance,
  mapping = aes(
    x = region,
    y = charges)) +
  geom_bar(
    stat = 'summary',
    fun = 'mean',
    fill = "#005a43")

```

#### Step 4: Add labels and themes

```{r}
#| label: plot-region-charges-bar-custom-labelsthemes
#| fig-cap: "a barplot depicting differences in charges by region"
#| fig-alt: a barplot of insurance charges by region  
#| fig-height: 6
#| fig-width: 8

plot_region_charges <- ggplot(data = insurance, mapping = aes(x = region, y = charges)) + 
  geom_bar(stat = 'summary', fun = 'mean', fill = "#005a43") + 
  ggtitle("Mean Insurance Charges Based on Region") + 
  xlab("Region") +
  ylab("Insurance Charges") +
  theme_bw()
```

#### Step 5: save plot as image using `ggsave()`

[ggsave( )](https://ggplot2.tidyverse.org/reference/ggsave.html) is a specific function to save a plot as an image in .jpg or .png image. This plot is saved in your "files" folder, which can be exported out of Posit Cloud and then added to your google drive and on to the poster.

::: callout-important
## Requirement

You must use file for both your final report and team manuscript.

Your *R&D Report*, *Team R&D Manuscript*, *Final Report*, and *Final Manuscript* must include `ggsave( )` for plots.
:::

```{r}
# Print the plot
print(plot_region_charges)

# save the plot
ggsave("plots/plot1:region.png", 
       plot = plot_region_charges, 
       width = 10, 
       height = 8, 
       dpi = 300)
```

After you run the code, the console will ask you a question. The use of `plots/` in the `ggsave()` code chunk will create a folder called **Plots** in your files within Posit Cloud if you type "1" and click return/enter.

![](images/ggplot2-ggsave.png){fig-alt="a screenshot of the console output after running the ggsave code"}

In your **Files**, click the **Plots** folder. Your location within Posit Cloud is shown below: Cloud \> project \> plots. You are in the **Plots**.

![](images/ggplot2-ggsave-plotsfolder.png){fig-alt="this is a screenshot of the files within the plot folder of posit cloud"}

Click the gear icon (above " project \> plots"), click export, and **Download.** Then, upload this the plot and others within your team's google drive \> Team Survey Data \> Quant Data \> Plots.

##### Violin Plots with `geom_violin()`

Violin plots provide a different way to visualize information to capture the distribution of data for each category.

```{r}
#| label: plot-smoker-charges 
#| fig-cap: "a violin plot depicting differences in insurance charges based on smoker status"
#| fig-alt: the figure 
#| fig-height: 6
#| fig-width: 8

ggplot(data = insurance,
       mapping = aes(
         x = smoker,
         y = charges,
         fill = smoker)) + 
  geom_violin() +
  ggtitle("Distribution of Insurance Charges by Smoking Status") +
  xlab("Smoker (Y/N)") +
  ylab("Insurance Charges") +
  theme_bw()

#plot above plot without using plot = argument
ggsave("plots/plot2:smoker.png",
       width = 10, height = 8, dpi = 300)
```

To learn more about how to use violin plots for pre/post data, go to the next chapter on visualizing pre/post scores.
