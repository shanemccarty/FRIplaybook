{
  "hash": "f688a41b0d357da313573b1f52e87d2b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing pre/post scores\"\nsubtitle: \"How to create violin and raincloud plots\"\nauthor:\n  - Erica Sava\n  - Andrew Silhavy\nabstract: |\n  This chapter introduces students to advanced data visualization techniques for \n  comparing distributions across groups and time points using violin plots and raincloud \n  plots in ggplot2. Students begin by learning to import SPSS datasets using the haven \n  package and prepare pre/post intervention data for visualization. Using a real-world \n  example from an oral health and type 2 diabetes study conducted by FRI students, the \n  chapter demonstrates how to reshape wide-format data with multiple time points into \n  long format using tidyr's pivot_longer() and pivot_wider() functions. Students create \n  violin plots that layer box plots with kernel density curves to reveal complete data \n  distributions, then advance to raincloud plots that combine half-violin distributions, \n  box plots, and jittered raw data points in a single comprehensive visualization. The \n  chapter covers practical customization techniques including manual color scaling, \n  position adjustments, and layering multiple geometric elements to create \n  publication-ready figures. Students explore how these visualizations help assess \n  normality assumptions for statistical tests, identify outliers, compare group \n  distributions, and effectively communicate intervention effects. By the end of this \n  chapter, students will understand when violin and raincloud plots are more informative \n  than traditional box plots and be able to create sophisticated pre/post visualizations \n  that display both summary statistics and underlying data distributions for their own \n  research projects.\nkeywords:\n  - tidyr\n  - data visualization\n  - ggplot2\n  - violin plots\n  - raincloud plots\n  - pre/post analysis\n  - intervention analysis\ndate: 10.21.2025\ndate-format: \"MM.DD.YYYY\"\nformat: html\neditor: visual\nexecute:\n  warning: false\n  message: false\n---\n\n------------------------------------------------------------------------\n\n::: callout-tip\n## ðŸ“– `haven` and `geom_violin ( )` resources\n\n-   [`haven` package for SPSS data](https://haven.tidyverse.org)\n-   [geom_violin with ggplot2](https://ggplot2.tidyverse.org/reference/geom_violin.html)\n:::\n\n## Oral Health Dataset\n\nA team of FRI students in the Public Health stream designed a study on oral health and type 2 diabetes. The convenient sample of Binghamton students, faculty, and staff was collected in September and October of 2024.\n\n## Library\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) ## for SPSS data\nlibrary(naniar)\nlibrary(dplyr)\nlibrary(ggplot2) ## for data viz\nlibrary(ggdist)\nlibrary(gghalves)\nlibrary(see)\nlibrary(tidyverse)\noralhealthdata_prepost <- read_sav(\"data/3.19.2025.oralhealth.erica.sav\",\nuser_na = FALSE)\n\n# REPLACE\n## replace missing data\noralhealthdata_prepost <- oralhealthdata_prepost %>%\n  replace_with_na_all(condition = ~.x %in% c(-99, -50))\n```\n:::\n\n\n## Using `tidyr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\n# Create long format with separate columns for each SE type\nlongdata <- pivot_longer(oralhealthdata_prepost,\n                         cols = c(\"BSE_T1\", \"BSE_T2\", \"CSE_T1\", \"CSE_T2\", \"ISE_T1\", \"ISE_T2\"),\n                         names_to = c(\"SE_type\", \"Time\"),\n                        names_pattern = \"(.+)_(.+)\",\n                        values_to = \"SE\",\n                        values_drop_na = TRUE)\n\n# Convert T1/T2 to before/after\nlongdata$Time <- ifelse(longdata$Time == \"T1\", \"before\", \"after\")\n\n# Pivot wider to get separate columns for each SE type\nlongdata <- pivot_wider(longdata,\n                       names_from = SE_type,\n                       values_from = SE)\n\n# Keep only the desired columns\nlongdata <- longdata[, c(\"Time\", \"BSE\", \"CSE\", \"ISE\")]\n\nlongdata$Time <- factor(longdata$Time, levels = c('before','after'))\n\nlongdata_long <- pivot_longer(longdata, cols = c(BSE, CSE, ISE), \n               names_to = \"SelfEfficacy\", \n               values_to = \"Score\")\n\nlongdata_long$SelfEfficacy <- factor(longdata_long$SelfEfficacy, levels = c(\"BSE\", \"CSE\", \"ISE\"))\nlongdata_long$Time <- factor(longdata_long$Time, levels = c(\"before\", \"after\"))\n\nlongdata_long <- longdata %>%\n  pivot_longer(cols = c(BSE, CSE, ISE), \n               names_to = \"SelfEfficacy\", \n               values_to = \"Score\")\n\n# Create a new variable combining 'SelfEfficacy' and 'Time'\nlongdata_long$SelfEfficacyTime <- factor(\n  paste(longdata_long$SelfEfficacy, longdata_long$Time),\n  levels = c(\"BSE before\", \"BSE after\", \"CSE before\", \"CSE after\", \"ISE before\", \"ISE after\")\n)\n```\n:::\n\n\nMore more information on `tidyr`, see the [tidyr chapter](#tidyr.qmd).\n\n## Visualizing with violin plots\n\n### What is a violin plot? {auto-animate=\"true\"}\n\n-   Combines components of a box plot and kernel density plot (similar to a histogram but shows the distribution as a continuous curve instead of with bars).\n\n-   Shows the distribution of variables for each group\n\n    ![](images/violin-violinstock.png){width=\"50%\" height=\"50%\"}\n\n### Why are violin plots important? {auto-animate=\"true\"}\n\n-   Helpful in making comparisons amongst distributions of different groups.\n-   Good way to visualize data.\n-   Easy way to identify trends and outliers in the data amongst different variables, which will help in forming relationships between different variables in your data.\n-   Can be creative and customize plots how you like (filling in plots, coloring, sizing, transparency, etc.)\n\n![](images/violin-histviolin.png){width=\"50%\" height=\"50%\"}\n\n### How can violin plots help in your projects? {auto-animate=\"true\"}\n\n-   Examples\n    -   Find normal distributions in your data, which will aid in the decision of what time of statistical test you use\n\n    -   Compare ditributions between two groups in your data\n\n    -   Was there an overall change in values in one of your variables before or after an event?\n\n## Example: T-test {auto-animate=\"true\"}\n\nA paired t-test is a statisical technique to compare the group means on two different variables when participants responded to both variables. The objective of the study from this dataset is to examine whether self-efficacy **increased** after a brief online educational intervention video.\n\nThe plot below visualizes the six variables (3 pretest, 3 postest) ussed in the 3 paired t-tests.\n\n![](images/violin-boxplot.png){width=\"80%\" height=\"80%\"} :::\n\n## Example: Violin Plot {auto-animate=\"true\"}\n\nNow you can see the distribution of the basic self-efficacy variable, in addition to the box plot.\n\n\n::: {.cell code-font-size='30px'}\n\n```{.r .cell-code}\nggplot(longdata_long, \n       aes(\n         x = SelfEfficacyTime,\n         y = Score,\n         fill = SelfEfficacy)) + \n  geom_violin() + \n  geom_boxplot(\n    width = .1, \n    position = position_dodge(width = 0.9)) + \n  geom_point(aes(color = Time),\n             size = 1,\n             position = position_jitter(width = 0.2)) + \n  scale_fill_manual(\n    values = c(\n      \"BSE\" = \"#69b3a2\",\n      \"CSE\" = \"cornflowerblue\",\n      \"ISE\" = \"darkorchid4\")) + \n  scale_color_manual(\n    values = c(\n      'before' = 'white',\n      'after' = 'black')) + \n  ggtitle(\"Change in Self-Efficacy Due to Intervention\")\n```\n\n::: {.cell-output-display}\n![](violin_files/figure-html/Basic violin plot-1.png){width=768}\n:::\n:::\n\n\n## Raincloud plots {auto-animate=\"true\"}\n\n-   What if you wanted to see the distribution of the variables and the raw data side by side?\n-   A raincloud plot allows you to add different types of plot types onto one figure.\n-   Below, the figure has a half violin plot, boxplot, and raw data points jittered on top.\n\n\n::: {.cell code-font-size='30px'}\n\n```{.r .cell-code}\nggplot(longdata_long,\n       aes(\n         x = SelfEfficacyTime,\n         y = Score,\n         fill = SelfEfficacy)) +   \n  geom_violinhalf(aes(\n    x = SelfEfficacyTime,\n    y = Score,\n    fill = SelfEfficacy), trim = TRUE, \n  position = position_nudge(x = 0.15)) +\n  geom_boxplot(width = .1, outlier.shape = NA,    \n  position = position_nudge(x = -0.15)) + geom_point(position = position_nudge(x = -0.35)) +  \n  scale_fill_manual(values = c(\n    \"BSE\" = \"#69b3a2\",\n    \"CSE\" = \"cornflowerblue\",\n    \"ISE\" = \"darkorchid4\")) +\n  scale_color_manual(values = c(\n    'before' = 'white',\n    'after' = 'black')) +   \n  ggtitle(\"Change in Self-Efficacy Due to Intervention\")\n```\n\n::: {.cell-output-display}\n![](violin_files/figure-html/half-violin plot-1.png){width=768}\n:::\n:::\n\n\n::: callout-tip\n## ðŸ“– raincloud plot resources\n\nThere are many different ways to create raincloud plots:\n\n-   [Raincloud plots with ggplot2](https://z3tt.github.io/Rainclouds/)\n-   [Raincloudplots](https://github.com/jorvlan/raincloudplots)\n-   [geom_paired\\_\\_raincloud()](https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud/)\n:::\n\n## Summary {auto-animate=\"true\"}\n\n-   Violin and raincloud plots are an effective strategy to visualize your information.\n-   It is important to visualize your data in a way that will make it easy for the audience to understand your findings.\n-   Plots can be easily customized in R using:\n    -   Fill\n    -   Color\n    -   Size\n    -   Transparency (alpha = )\n    -   Position\n\nNow you can confidently create your own violin and raincloud plots in R!!!\n\n![](images/violin-cat.png){width=\"50%\" height=\"50%\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}